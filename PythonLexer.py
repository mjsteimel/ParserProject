# Generated from Python.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,42,321,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,1,0,1,0,1,1,1,1,
        1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,
        1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,
        1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,3,22,169,8,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,
        1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,
        1,28,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,
        1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,5,35,213,8,35,10,35,
        12,35,216,9,35,1,36,1,36,3,36,220,8,36,1,37,4,37,223,8,37,11,37,
        12,37,224,1,38,4,38,228,8,38,11,38,12,38,229,1,38,1,38,5,38,234,
        8,38,10,38,12,38,237,9,38,1,38,1,38,4,38,241,8,38,11,38,12,38,242,
        3,38,245,8,38,1,39,1,39,1,39,1,39,5,39,251,8,39,10,39,12,39,254,
        9,39,1,39,1,39,1,39,1,39,1,39,5,39,261,8,39,10,39,12,39,264,9,39,
        1,39,3,39,267,8,39,1,40,1,40,5,40,271,8,40,10,40,12,40,274,9,40,
        1,40,1,40,1,41,1,41,1,41,1,41,1,41,5,41,283,8,41,10,41,12,41,286,
        9,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,5,41,296,8,41,10,41,
        12,41,299,9,41,1,41,1,41,1,41,3,41,304,8,41,1,41,1,41,1,42,4,42,
        309,8,42,11,42,12,42,310,1,42,1,42,1,43,4,43,316,8,43,11,43,12,43,
        317,1,43,1,43,2,284,297,0,44,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
        39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
        61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,0,77,0,79,38,81,39,
        83,40,85,41,87,42,1,0,7,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
        95,97,122,1,0,48,57,3,0,10,10,13,13,34,34,3,0,10,10,13,13,39,39,
        2,0,10,10,13,13,2,0,9,9,32,32,337,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
        0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,79,1,0,
        0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,1,89,1,0,
        0,0,3,91,1,0,0,0,5,94,1,0,0,0,7,97,1,0,0,0,9,100,1,0,0,0,11,103,
        1,0,0,0,13,109,1,0,0,0,15,118,1,0,0,0,17,124,1,0,0,0,19,128,1,0,
        0,0,21,131,1,0,0,0,23,137,1,0,0,0,25,139,1,0,0,0,27,141,1,0,0,0,
        29,143,1,0,0,0,31,145,1,0,0,0,33,147,1,0,0,0,35,149,1,0,0,0,37,151,
        1,0,0,0,39,153,1,0,0,0,41,155,1,0,0,0,43,157,1,0,0,0,45,168,1,0,
        0,0,47,170,1,0,0,0,49,174,1,0,0,0,51,177,1,0,0,0,53,181,1,0,0,0,
        55,184,1,0,0,0,57,189,1,0,0,0,59,194,1,0,0,0,61,196,1,0,0,0,63,199,
        1,0,0,0,65,201,1,0,0,0,67,204,1,0,0,0,69,207,1,0,0,0,71,210,1,0,
        0,0,73,219,1,0,0,0,75,222,1,0,0,0,77,244,1,0,0,0,79,266,1,0,0,0,
        81,268,1,0,0,0,83,303,1,0,0,0,85,308,1,0,0,0,87,315,1,0,0,0,89,90,
        5,61,0,0,90,2,1,0,0,0,91,92,5,43,0,0,92,93,5,61,0,0,93,4,1,0,0,0,
        94,95,5,45,0,0,95,96,5,61,0,0,96,6,1,0,0,0,97,98,5,42,0,0,98,99,
        5,61,0,0,99,8,1,0,0,0,100,101,5,47,0,0,101,102,5,61,0,0,102,10,1,
        0,0,0,103,104,5,98,0,0,104,105,5,114,0,0,105,106,5,101,0,0,106,107,
        5,97,0,0,107,108,5,107,0,0,108,12,1,0,0,0,109,110,5,99,0,0,110,111,
        5,111,0,0,111,112,5,110,0,0,112,113,5,116,0,0,113,114,5,105,0,0,
        114,115,5,110,0,0,115,116,5,117,0,0,116,117,5,101,0,0,117,14,1,0,
        0,0,118,119,5,119,0,0,119,120,5,104,0,0,120,121,5,105,0,0,121,122,
        5,108,0,0,122,123,5,101,0,0,123,16,1,0,0,0,124,125,5,102,0,0,125,
        126,5,111,0,0,126,127,5,114,0,0,127,18,1,0,0,0,128,129,5,105,0,0,
        129,130,5,110,0,0,130,20,1,0,0,0,131,132,5,114,0,0,132,133,5,97,
        0,0,133,134,5,110,0,0,134,135,5,103,0,0,135,136,5,101,0,0,136,22,
        1,0,0,0,137,138,5,43,0,0,138,24,1,0,0,0,139,140,5,45,0,0,140,26,
        1,0,0,0,141,142,5,42,0,0,142,28,1,0,0,0,143,144,5,47,0,0,144,30,
        1,0,0,0,145,146,5,37,0,0,146,32,1,0,0,0,147,148,5,40,0,0,148,34,
        1,0,0,0,149,150,5,41,0,0,150,36,1,0,0,0,151,152,5,91,0,0,152,38,
        1,0,0,0,153,154,5,93,0,0,154,40,1,0,0,0,155,156,5,44,0,0,156,42,
        1,0,0,0,157,158,5,58,0,0,158,44,1,0,0,0,159,160,5,84,0,0,160,161,
        5,114,0,0,161,162,5,117,0,0,162,169,5,101,0,0,163,164,5,70,0,0,164,
        165,5,97,0,0,165,166,5,108,0,0,166,167,5,115,0,0,167,169,5,101,0,
        0,168,159,1,0,0,0,168,163,1,0,0,0,169,46,1,0,0,0,170,171,5,97,0,
        0,171,172,5,110,0,0,172,173,5,100,0,0,173,48,1,0,0,0,174,175,5,111,
        0,0,175,176,5,114,0,0,176,50,1,0,0,0,177,178,5,110,0,0,178,179,5,
        111,0,0,179,180,5,116,0,0,180,52,1,0,0,0,181,182,5,105,0,0,182,183,
        5,102,0,0,183,54,1,0,0,0,184,185,5,101,0,0,185,186,5,108,0,0,186,
        187,5,105,0,0,187,188,5,102,0,0,188,56,1,0,0,0,189,190,5,101,0,0,
        190,191,5,108,0,0,191,192,5,115,0,0,192,193,5,101,0,0,193,58,1,0,
        0,0,194,195,5,62,0,0,195,60,1,0,0,0,196,197,5,62,0,0,197,198,5,61,
        0,0,198,62,1,0,0,0,199,200,5,60,0,0,200,64,1,0,0,0,201,202,5,60,
        0,0,202,203,5,61,0,0,203,66,1,0,0,0,204,205,5,61,0,0,205,206,5,61,
        0,0,206,68,1,0,0,0,207,208,5,33,0,0,208,209,5,61,0,0,209,70,1,0,
        0,0,210,214,7,0,0,0,211,213,7,1,0,0,212,211,1,0,0,0,213,216,1,0,
        0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,72,1,0,0,0,216,214,1,0,0,
        0,217,220,3,75,37,0,218,220,3,77,38,0,219,217,1,0,0,0,219,218,1,
        0,0,0,220,74,1,0,0,0,221,223,7,2,0,0,222,221,1,0,0,0,223,224,1,0,
        0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,76,1,0,0,0,226,228,7,2,0,
        0,227,226,1,0,0,0,228,229,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,
        0,230,231,1,0,0,0,231,235,5,46,0,0,232,234,7,2,0,0,233,232,1,0,0,
        0,234,237,1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,245,1,0,0,
        0,237,235,1,0,0,0,238,240,5,46,0,0,239,241,7,2,0,0,240,239,1,0,0,
        0,241,242,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,245,1,0,0,
        0,244,227,1,0,0,0,244,238,1,0,0,0,245,78,1,0,0,0,246,252,5,34,0,
        0,247,251,8,3,0,0,248,249,5,34,0,0,249,251,5,34,0,0,250,247,1,0,
        0,0,250,248,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,252,253,1,0,
        0,0,253,255,1,0,0,0,254,252,1,0,0,0,255,267,5,34,0,0,256,262,5,39,
        0,0,257,261,8,4,0,0,258,259,5,39,0,0,259,261,5,39,0,0,260,257,1,
        0,0,0,260,258,1,0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,263,1,
        0,0,0,263,265,1,0,0,0,264,262,1,0,0,0,265,267,5,39,0,0,266,246,1,
        0,0,0,266,256,1,0,0,0,267,80,1,0,0,0,268,272,5,35,0,0,269,271,8,
        5,0,0,270,269,1,0,0,0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,
        0,0,0,273,275,1,0,0,0,274,272,1,0,0,0,275,276,6,40,0,0,276,82,1,
        0,0,0,277,278,5,34,0,0,278,279,5,34,0,0,279,280,5,34,0,0,280,284,
        1,0,0,0,281,283,9,0,0,0,282,281,1,0,0,0,283,286,1,0,0,0,284,285,
        1,0,0,0,284,282,1,0,0,0,285,287,1,0,0,0,286,284,1,0,0,0,287,288,
        5,34,0,0,288,289,5,34,0,0,289,304,5,34,0,0,290,291,5,39,0,0,291,
        292,5,39,0,0,292,293,5,39,0,0,293,297,1,0,0,0,294,296,9,0,0,0,295,
        294,1,0,0,0,296,299,1,0,0,0,297,298,1,0,0,0,297,295,1,0,0,0,298,
        300,1,0,0,0,299,297,1,0,0,0,300,301,5,39,0,0,301,302,5,39,0,0,302,
        304,5,39,0,0,303,277,1,0,0,0,303,290,1,0,0,0,304,305,1,0,0,0,305,
        306,6,41,0,0,306,84,1,0,0,0,307,309,7,5,0,0,308,307,1,0,0,0,309,
        310,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,312,1,0,0,0,312,
        313,6,42,0,0,313,86,1,0,0,0,314,316,7,6,0,0,315,314,1,0,0,0,316,
        317,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,319,1,0,0,0,319,
        320,6,43,0,0,320,88,1,0,0,0,20,0,168,214,219,224,229,235,242,244,
        250,252,260,262,266,272,284,297,303,310,317,1,6,0,0
    ]

class PythonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    BREAK = 6
    CONTINUE = 7
    WHILE = 8
    FOR = 9
    IN = 10
    RANGE = 11
    PLUS = 12
    MINUS = 13
    MULT = 14
    DIV = 15
    MOD = 16
    LPAREN = 17
    RPAREN = 18
    LBRACK = 19
    RBRACK = 20
    COMMA = 21
    COLON = 22
    BOOLEAN = 23
    AND = 24
    OR = 25
    NOT = 26
    IF = 27
    ELIF = 28
    ELSE = 29
    GT = 30
    GTE = 31
    LT = 32
    LTE = 33
    EQ = 34
    NEQ = 35
    NAME = 36
    NUMBER = 37
    STRING = 38
    SINGLE_LINE_COMMENT = 39
    MULTI_LINE_COMMENT = 40
    NEWLINE = 41
    WS = 42

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'+='", "'-='", "'*='", "'/='", "'break'", "'continue'", 
            "'while'", "'for'", "'in'", "'range'", "'+'", "'-'", "'*'", 
            "'/'", "'%'", "'('", "')'", "'['", "']'", "','", "':'", "'and'", 
            "'or'", "'not'", "'if'", "'elif'", "'else'", "'>'", "'>='", 
            "'<'", "'<='", "'=='", "'!='" ]

    symbolicNames = [ "<INVALID>",
            "BREAK", "CONTINUE", "WHILE", "FOR", "IN", "RANGE", "PLUS", 
            "MINUS", "MULT", "DIV", "MOD", "LPAREN", "RPAREN", "LBRACK", 
            "RBRACK", "COMMA", "COLON", "BOOLEAN", "AND", "OR", "NOT", "IF", 
            "ELIF", "ELSE", "GT", "GTE", "LT", "LTE", "EQ", "NEQ", "NAME", 
            "NUMBER", "STRING", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
            "NEWLINE", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "BREAK", "CONTINUE", 
                  "WHILE", "FOR", "IN", "RANGE", "PLUS", "MINUS", "MULT", 
                  "DIV", "MOD", "LPAREN", "RPAREN", "LBRACK", "RBRACK", 
                  "COMMA", "COLON", "BOOLEAN", "AND", "OR", "NOT", "IF", 
                  "ELIF", "ELSE", "GT", "GTE", "LT", "LTE", "EQ", "NEQ", 
                  "NAME", "NUMBER", "INT", "FLOAT", "STRING", "SINGLE_LINE_COMMENT", 
                  "MULTI_LINE_COMMENT", "NEWLINE", "WS" ]

    grammarFileName = "Python.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


